openapi: 3.0.1
info:
  description: "Manage customers and products and sell the products to the customers"
  version: "1.0.0"
  title: "Online Shop API"
tags:
  - name: "customers"
    description: "Manage Customers"
  - name: "paypal"
    description: "Manage PayPal payment data"
  - name: "creditcard"
    description: "Manage credit card payment data"
servers:
  - url: http://localhost:8080/api/v1
  - url: https://localhost:8080/api/v1
paths:
  /customers:
    get:
      tags:
        - "customers"
      summary: "Read all customers"
      responses:
        200:
          description: "Customers were read successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      tags:
        - "customers"
      summary: "Create a customer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        201:
          description: "Customer was created successfully"
          headers:
            Location:
              description: "URL to the newly created customer"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: "Customer is invalid"
  /customers/{id}:
    get:
      tags:
        - "customers"
      summary: "Read a single customer"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        200:
          description: "Customer was found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          description: "Customer could not be found"
    delete:
      tags:
        - "customers"
      summary: "Delete a single customer"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        204:
          description: "Customer was deleted successfully"
        404:
          description: "Customer not be found"
  /customers/{id}/address:
    get:
      tags:
        - "customers"
      summary: "Read the address of the customer"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        200:
          description: "Customer address was found"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        404:
          description: Customer could not be found or does not have any address assigned
    put:
      tags:
        - "customers"
      summary: "Assign address to the customer"
      parameters:
        - $ref: "#/components/parameters/customerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        204:
          description: "Address was successfully assigned"
        404:
          description: "Customer could not be found"
  /customers/{id}/payments/paypal:
    get:
      tags:
        - "paypal"
      summary: "Read PayPal payment data"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        200:
          description: "PayPal payment data was found"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PayPal'
        404:
          description: "Customer could not be found or does not have any payment data assigned"
    put:
      tags:
        - "paypal"
      summary: "Assign PayPal payment data"
      parameters:
        - $ref: "#/components/parameters/customerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayPal'
        required: true
      responses:
        204:
          description: "PayPal payment data was successfully assigned"
        404:
          description: "Customer could not be found"
    delete:
      tags:
        - "paypal"
      summary: "Delete PayPal payment data"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        204:
          description: "PayPal payment data was successfully deleted"
        404:
          description: "Customer could not be found"
  /customers/{id}/payments/creditcard:
    get:
      tags:
        - "creditcard"
      summary: "Read credit card payment data"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        200:
          description: "Credit card payment data was found"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditCard'
        404:
          description: "Customer could not be found or does not have any payment data assigned"
    put:
      tags:
        - "creditcard"
      summary: "Assign Credit card payment data"
      parameters:
        - $ref: "#/components/parameters/customerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditCard'
        required: true
      responses:
        204:
          description: "Credit card payment data was successfully assigned"
        404:
          description: "Customer could not be found"
    delete:
      tags:
        - "creditcard"
      summary: "Delete credit card payment data"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        204:
          description: "Credit card payment data was successfully deleted"
        404:
          description: "Customer could not be found"
components:
  schemas:
    Customer:
      required:
        - birthdate
        - name
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          minLength: 3
          type: string
          example: Tom Mayer
        birthdate:
          type: string
          format: date
    Address:
      required:
        - city
        - street
        - zip
      type: object
      properties:
        street:
          minLength: 3
          type: string
        number:
          type: string
        zip:
          pattern: '[0-9]{5}'
          type: string
        city:
          minLength: 1
          type: string
    PayPal:
      required:
        - email
      type: object
      properties:
        email:
          minLength: 1
          type: string
    CreditCard:
      required:
        - number
        - validity
      type: object
      properties:
        number:
          minLength: 1
          type: string
        validity:
          pattern: '[0-9]{2}/[0-9]{2}'
          type: string
        cvc:
          pattern: '[0-9]{3}'
          type: string
  parameters:
    customerId:
      in: "path"
      name: "id"
      description: "The id of the customer"
      required: true
      schema:
        type: string
        format: uuid
